






 

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Correlation Analysis</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .header {
            text-align: center;
            color: #1976d2;
            margin-bottom: 30px;
            border-bottom: 2px solid #1976d2;
            padding-bottom: 10px;
        }
        .control-section {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        .form-group {
            margin-bottom: 15px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #333;
        }
        select, input {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }
        select[multiple] {
            height: 120px;
        }
        .button-group {
            text-align: center;
            margin: 20px 0;
        }
        .btn {
            background: #1976d2;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            margin: 0 10px;
        }
        .btn:hover {
            background: #1565c0;
        }
        .btn-secondary {
            background: #757575;
        }
        .btn-secondary:hover {
            background: #616161;
        }
        .results-section {
            background: white;
            border: 1px solid #ddd;
            border-radius: 5px;
            margin-top: 20px;
            min-height: 200px;
        }
        .results-header {
            background: #e3f2fd;
            padding: 15px;
            border-bottom: 1px solid #ddd;
            font-weight: bold;
            color: #1976d2;
        }
        .results-content {
            padding: 20px;
            white-space: pre-wrap;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            line-height: 1.4;
            min-height: 150px;
            background: #fafafa;
        }
        .error {
            color: #d32f2f;
            background: #ffebee;
            padding: 15px;
            border-radius: 5px;
            border: 1px solid #ffcdd2;
        }
        .loading {
            text-align: center;
            color: #1976d2;
            font-style: italic;
        }
        .method-description {
            font-size: 12px;
            color: #666;
            margin-top: 5px;
            font-style: italic;
        }
        .grid-section {
            margin: 20px 0;
        }
        .grid-container {
            border: 1px solid #ddd;
            border-radius: 5px;
            overflow: hidden;
        }
        .grid-header {
            background: #e3f2fd;
            padding: 10px;
            font-weight: bold;
            color: #1976d2;
        }
        #data-grid {
            width: 100%;
            border-collapse: collapse;
        }
        #data-grid th, #data-grid td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: center;
        }
        #data-grid th {
            background: #f5f5f5;
            font-weight: bold;
        }
        .add-row-btn {
            margin: 10px;
            padding: 8px 16px;
            background: #4caf50;
            color: white;
            border: none;
            border-radius: 3px;
            cursor: pointer;
        }
        .add-row-btn:hover {
            background: #45a049;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Correlation Analysis Tool</h1>
            <p>Analyze relationships between variables using different correlation methods</p>
        </div>

         Data Input Section
        <div class="grid-section">
            <div class="grid-container">
                <div class="grid-header">Data Input Grid</div>
                <table id="data-grid">
                    <thead>
                        <tr id="header-row">
                            <th>A</th>
                            <th>B</th>
                            <th>C</th>
                            <th>D</th>
                        </tr>
                    </thead>
                    <tbody id="grid-body">
                        <tr><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td></tr>
                        <tr><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td></tr>
                        <tr><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td></tr>
                        <tr><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td></tr>
                        <tr><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td></tr>
                    </tbody>
                </table>
                <button class="add-row-btn" onclick="addRow()">Add Row</button>
            </div>
        </div> -->

        <!-- Control Section -->
        <div class="control-section">
            <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 20px;">
                <div class="form-group">
                    <label for="method">Analysis Method:</label>
                    <select id="method" onchange="updateMethodDescription()">
                        <option value="bivariate">Bivariate Correlation</option>
                        <option value="partial">Partial Correlation</option>
                        <option value="distances">Distance Matrix</option>
                    </select>
                    <div class="method-description" id="method-desc">
                        Calculate pairwise correlations between selected variables
                    </div>
                </div>

                <div class="form-group">
                    <label for="group1">Group 1 Variables:</label>
                    <select id="group1" multiple>
                        <option value="0">A</option>
                        <option value="1">B</option>
                        <option value="2">C</option>
                        <option value="3">D</option>
                    </select>
                </div>

                <!-- <div class="form-group">
                    <label for="group2">Group 2 Variables (optional):</label>
                    <select id="group2" multiple>
                        <option value="0">A</option>
                        <option value="1">B</option>
                        <option value="2">C</option>
                        <option value="3">D</option>
                    </select>
                </div> -->
            </div>

            <div class="form-group" id="controls-group" style="display: none;">
                <label for="controls">Control Variables:</label>
                <select id="controls" multiple>
                    <option value="0">A</option>
                    <option value="1">B</option>
                    <option value="2">C</option>
                    <option value="3">D</option>
                </select>
            </div>

            <div class="button-group">
                <button class="btn" onclick="calculateCorrelation()">Calculate Correlation</button>
                <button class="btn btn-secondary" onclick="clearResults()">Clear Results</button>
                <button class="btn btn-secondary" onclick="clearData()">Clear Data</button>
            </div>
        </div>

        <!-- Results Section -->
        <div class="results-section">
            <div class="results-header">
                CORRELATION Results:
            </div>
            <div class="results-content" id="results">
                Click "Calculate Correlation" to see results here...
            </div>
        </div>
    </div>

    <script>
        // Update method description
        function updateMethodDescription() {
            const method = document.getElementById('method').value;
            const desc = document.getElementById('method-desc');
            const controlsGroup = document.getElementById('controls-group');

            switch(method) {
                case 'bivariate':
                    desc.textContent = 'Calculate pairwise correlations between selected variables';
                    controlsGroup.style.display = 'none';
                    break;
                case 'partial':
                    desc.textContent = 'Calculate correlations while controlling for other variables';
                    controlsGroup.style.display = 'block';
                    break;
                case 'distances':
                    desc.textContent = 'Calculate Euclidean distances between observations';
                    controlsGroup.style.display = 'none';
                    break;
            }
        }

        // Add new row to the grid
        function addRow() {
            const tbody = document.getElementById('grid-body');
            const headerCount = document.querySelectorAll('#header-row th').length;
            const newRow = document.createElement('tr');

            for (let i = 0; i < headerCount; i++) {
                const cell = document.createElement('td');
                cell.contentEditable = true;
                newRow.appendChild(cell);
            }

            tbody.appendChild(newRow);
        }

        // Get data from grid
        function getGridData() {
            const headers = [];
            document.querySelectorAll('#header-row th').forEach(th => {
                headers.push(th.textContent.trim());
            });

            const data = [];
            document.querySelectorAll('#grid-body tr').forEach(row => {
                const rowData = [];
                row.querySelectorAll('td').forEach(cell => {
                    const value = cell.textContent.trim();
                    rowData.push(value);
                });

                // Only add row if it has at least one non-empty value
                if (rowData.some(val => val !== '')) {
                    data.push(rowData);
                }
            });

            return { headers, data };
        }

        // Get selected options from multi-select
        function getSelectedOptions(selectId) {
            const select = document.getElementById(selectId);
            const selected = [];
            for (let option of select.selectedOptions) {
                selected.push(parseInt(option.value));
            }
            return selected;
        }

        // Calculate correlation
        function calculateCorrelation() {
            const resultsDiv = document.getElementById('results');
            resultsDiv.innerHTML = '<div class="loading">Calculating correlation... Please wait.</div>';

            try {
                const { headers, data } = getMainGridData();

                if (data.length === 0) {
                    resultsDiv.innerHTML = '<div class="error">No data entered. Please fill in some values in the grid.</div>';
                    return;
                }

                const group1 = getSelectedOptions('group1');
                const group2 = getSelectedOptions('group2');
                const controls = getSelectedOptions('controls');
                const method = document.getElementById('method').value;

                if (group1.length === 0) {
                    resultsDiv.innerHTML = '<div class="error">Please select at least one variable in Group 1.</div>';
                    return;
                }

                const requestData = {
                    calculation_type: 'correlation',
                    data: data,
                    headers: headers,
                    columns: [], // Not used for correlation
                    additional_data: {
                        group1: group1,
                        group2: group2,
                        controls: controls,
                        method: method
                    }
                };

                fetch('/api/calculate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(requestData)
                })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        resultsDiv.innerHTML = result.result || 'No results returned';
                    } else {
                        resultsDiv.innerHTML = `<div class="error">Error: ${result.error || 'Unknown error occurred'}</div>`;
                    }
                })
                .catch(error => {
                    console.error('Calculation error:', error);
                    resultsDiv.innerHTML = `<div class="error">Network error: ${error.message}</div>`;
                });

            } catch (error) {
                console.error('Error:', error);
                resultsDiv.innerHTML = `<div class="error">Error: ${error.message}</div>`;
            }
        }

        // Clear results
        function clearResults() {
            document.getElementById('results').innerHTML = 'Click "Calculate Correlation" to see results here...';
        }

        // Clear data
        function clearData() {
            document.querySelectorAll('#grid-body td').forEach(cell => {
                cell.textContent = '';
            });
            clearResults();
        }

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            updateMethodDescription();
        });



        /**
       * Reads headers and data from the main spreadsheet grid behind the popup.
       * Expects a table with id="main-grid" in your page outside the modal.
       */
      function getMainGridData() {
        // Get column headers
        const headers = Array.from(
          document.querySelectorAll('#main-grid thead th')
        ).map(th => th.textContent.trim());

        // Get all non-empty rows
        const data = [];
        document.querySelectorAll('#main-grid tbody tr').forEach(tr => {
          const rowVals = Array.from(tr.children).map(td => td.textContent.trim());
          if (rowVals.some(v => v !== '')) {
            data.push(rowVals);
          }
        });

        return { headers, data };
      }



    </script>
</body>
</html>
























index.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Jasper Colin Project</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable@15.3.0/dist/handsontable.min.css">
  <style>
    body { font-family: Arial, sans-serif; background: #f9f9f9; margin: 0; }
    .menu-bar {
      background: #fff; box-shadow: 0 2px 8px rgba(0,0,0,0.04); padding: 0;
      display: flex; align-items: center; min-height: 56px;
      border-bottom: 1px solid #eaeaea; z-index: 100; position: relative;
    }
    .menu-logo { height: 38px; margin: 0 18px 0 12px; }
    .menu-title { font-weight: bold; font-size: 18px; margin-right: 40px; }
    #menus { display: flex; }
    .menu-group { position: relative; margin-right: 32px; }
    .dropdown { cursor: pointer; padding: 10px 14px; background: none; border: none; font-size: 16px; color: #222; border-radius: 4px;}
    .dropdown:hover, .dropdown:focus { background: #e3f2fd; }
    .dropdown-content { display: none; position: absolute; top: 42px; left: 0; background: #fff; min-width: 200px; box-shadow: 0 4px 20px #0002; z-index: 1000; border-radius: 4px; padding: 8px 0;}
    .menu-group:hover .dropdown-content, .menu-group:focus-within .dropdown-content { display: block; }
    .dropdown-content button { display: block; width: 100%; background: none; border: none; padding: 8px 22px; text-align: left; font-size: 15px; color: #1976d2; cursor: pointer;}
    .dropdown-content button:hover { background: #e3f2fd; color: #004ba0; }
    .submenu-group { position:relative; }
    .submenu-content { display:none; position: absolute; left:100%; top:0; min-width:170px; background:#fff; box-shadow:0 4px 20px #0002; border-radius:4px; padding:7px 0; z-index:1100;}
    .dropdown-content .submenu-group:hover .submenu-content { display: block;}
    #hot { margin: 28px auto 0 auto; width: 95%; max-width: 1100px; z-index: 1 !important; }
    #result { font-weight: bold; margin-top: 16px; margin-left: 6px; min-height: 20px; padding: 10px; background: #f5f5f5; border-radius: 4px; }
    #version { margin-left: auto; margin-right: 36px; font-size: 13px; color: #777; }
    #modal { display: none; position: fixed; left: 0; top: 0; width: 100vw; height: 100vh; background: rgba(0,0,0,0.5); align-items: center; justify-content: center; z-index: 1000;}
    #modal iframe { background:#fff; border-radius:8px; border:none; width:500px; height:400px; }
    #fileInput { display: none; }
    .loading { color: #666; font-style: italic; }



    /* Container for all results */
    #result h4 {
      font-family: Arial, sans-serif;
      color: #1976d2;
      margin-bottom: 8px;
    }

    /* Each result block */
    .result-block {
      border-left: 1px solid #1976d2;
      border-right: 1px solid #1976d2;
      border-bottom: 1px solid #1976d2;
      padding: 8px 12px;
      font-family: Consolas, monospace;
      font-size: 14px;
      white-space: pre-line;  /* preserve newline formatting */
      margin: 0;
    }

    /* Top and bottom borders on the first and last lines */
    .result-block:first-child {
      border-top: 1px solid #1976d2;
    }
    .result-block:last-child {
      border-bottom: 1px solid #1976d2;
    }

    /* Separator between blocks */
    .result-block + .result-block {
      margin-top: 6px;
      padding-top: 12px;
    }


  </style>
</head>
<body>
  <div class="menu-bar">
    <img id="logo" src="static/logo.png" alt="Logo" class="menu-logo">
    <span class="menu-title">Jasper Colin Project</span>
    <div id="menus"></div>
    <span id="version">v1.0.0</span>
  </div>
  
  <input type="file" id="fileInput" accept=".xlsx,.xls">

  <div style="display: flex; align-items: flex-start;">
  <div id="result" style="min-width:270px; max-width:420px; margin-right:20px;"></div>
  <div style="flex:1;">
    <div id="hot"></div>
  </div>
</div>

  <!-- <div id="hot"></div>
  <div id="result"></div> -->

  <div id="modal">
    <iframe id="popup-frame" src=""></iframe>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/handsontable@15.3.0/dist/handsontable.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/xlsx/dist/xlsx.full.min.js"></script>
  <script>
    let resultsHistory = [];
    // Complete SPSS Menu Configuration
    const menuConfig = [
      {
        label: "File",
        items: [
          // {text: "New", submenu: [
          //   {text: "Data", action: ()=>showCalculationPopup('new_data')},
          //   {text: "Syntax", action: ()=>showCalculationPopup('new_syntax')},
          //   {text: "Output", action: ()=>showCalculationPopup('new_output')},
          //   {text: "Script", action: ()=>showCalculationPopup('new_script')}
          // ]},
          {text: "Open", submenu: [
            {text: "Data", action: ()=>document.getElementById('fileInput').click()},
            // {text: "Syntax", action: ()=>showCalculationPopup('open_syntax')},
            // {text: "Output", action: ()=>showCalculationPopup('open_output')},
            // {text: "Script", action: ()=>showCalculationPopup('open_script')}
          ]},
          // {text: "Save", action: ()=>saveData()},
          // {text: "Export", action: ()=>exportData()},
          { text: "Export", action: ()=>exportAllResults() },
          {text: "Exit", action: ()=>window.close()}
        ]
      },
      {
        label: "Analysis",
        items: [
          {text: "Descriptive Statistics", submenu: [
            // {text: "Frequencies", action: ()=>showCalculationPopup('frequencies')},
            // {text: "Descriptives", action: ()=>showCalculationPopup('descriptives')},
            {text: "Mean", action: ()=>showCalculationPopup('mean')},
            {text: "Median", action: ()=>showCalculationPopup('median')},
            {text: "Mode", action: ()=>showCalculationPopup('mode')},
            // {text: "Explore", action: ()=>showCalculationPopup('explore')}
          ]},
          // {text: "Compare Means", submenu: [
          //   {text: "Means", action: ()=>showCalculationPopup('means')},
          //   {text: "T-Test", action: ()=>showCalculationPopup('ttest')},
          //   {text: "One-Way ANOVA", action: ()=>showCalculationPopup('anova')}
          // ]},
          {text: "Correlate", submenu: [
            {text: "Bivariate/Partial/Distances", action: ()=>showCalculationPopup('correlation')},
            // {text: "Partial", action: ()=>showCalculationPopup('partial_correlation')},
            // {text: "Distance", action: ()=>showCalculationPopup('distances_correlation')}
          ]},

          // {text: "Regression", submenu: [
          //   {text: "Linear", action: ()=>showCalculationPopup('linear_regression')},
          //   {text: "Logistic", action: ()=>showCalculationPopup('logistic_regression')}
          // ]}
        ]
      },
      // {
      //   label: "Graphs",
      //   items: [
      //     {text: "Chart Builder", action: ()=>showCalculationPopup('chart_builder')},
      //     {text: "Legacy Dialogs", submenu: [
      //       {text: "Bar", action: ()=>showCalculationPopup('bar_chart')},
      //       {text: "Line", action: ()=>showCalculationPopup('line_chart')},
      //       {text: "Histogram", action: ()=>showCalculationPopup('histogram')},
      //       {text: "Scatter", action: ()=>showCalculationPopup('scatter_plot')}
      //     ]}
      //   ]
      // }
    ];

    // Handsontable initializatio n
    let hot;
    function createGridEmpty(rows=2, cols=80) {
      hot = new Handsontable(document.getElementById('hot'), {
        data: Array(rows).fill().map(() => Array(cols).fill("")),
        minRows: -1, minCols: 1,
        rowHeaders: true,
        colHeaders: Array(cols).fill().map((_, i) => String.fromCharCode(65 + i)),
        contextMenu: true,
        manualRowResize: true,
        manualColumnResize: true,
        licenseKey: 'non-commercial-and-evaluation',
        copyPaste: true,
      });
    }
    createGridEmpty();

    // Build menu system
    function buildMenus(config) {
      const menuDiv = document.getElementById('menus');
      menuDiv.innerHTML = '';
      config.forEach(menu => {
        let group = document.createElement('div');
        group.className = "menu-group";
        const btn = document.createElement('button');
        btn.className = "dropdown";
        btn.textContent = menu.label + " ▾";
        group.appendChild(btn);

        let dd = document.createElement('div');
        dd.className = "dropdown-content";
        menu.items.forEach(item => {
          if(item.submenu) {
            let smgroup = document.createElement('div');
            smgroup.className = "submenu-group";
            const smbtn = document.createElement('button');
            smbtn.textContent = item.text + " ▶";
            smgroup.appendChild(smbtn);

            let smdd = document.createElement('div');
            smdd.className = "submenu-content";
            item.submenu.forEach(subitem => {
              let smBtn = document.createElement('button');
              smBtn.textContent = subitem.text;
              smBtn.onclick = subitem.action;
              smdd.appendChild(smBtn);
            });
            smgroup.appendChild(smdd);
            dd.appendChild(smgroup);
          } else {
            const b = document.createElement('button');
            b.textContent = item.text;
            b.onclick = item.action;
            dd.appendChild(b);
          }
        });
        group.appendChild(dd);
        menuDiv.appendChild(group);
      });
    }
    buildMenus(menuConfig);

    // Show calculation popup from calculations folder
    // function showCalculationPopup(calculationType) {
    //   const modal = document.getElementById('modal');
    //   const iframe = document.getElementById('popup-frame');
    //   iframe.src = `calculations/${calculationType}.html`;
    //   modal.style.display = 'flex';
    // }

    // Show calculation popup with column data
    function showCalculationPopup(calculationType) {
      const modal = document.getElementById('modal');
      const iframe = document.getElementById('popup-frame');      
      // Get column headers and pass them as URL parameters
      const colHeaders = hot.getColHeader();
      const encodedHeaders = encodeURIComponent(JSON.stringify(colHeaders));
      
      iframe.src = `/calculations/${calculationType}.html?headers=${encodedHeaders}`;
      modal.style.display = 'flex';
    }

    // Close modal
    function closeModal() {
      document.getElementById('modal').style.display = 'none';
    }

    // This function will be called by popup iframes
    window.runCalculation = async function(calcType, selectedColumns, additionalData = {}) {
      try {
        document.getElementById('result').innerHTML = '<div class="loading">Calculating...</div>';


        // if (result.success) {
        //   // Save both grid data and result HTML
        //   resultsHistory.push({
        //     type: calcType,
        //     output_html: result.result,
        //     grid_data: hot.getData(),             // full 2D array snapshot
        //     headers: hot.getColHeader()           // header names
        //   });
        // }
        
        // Get data from grid
        const gridData = [];
        for(let r = 1; r < hot.countRows(); r++) {
          const row = [];
          for(let c = 0; c < hot.countCols(); c++) {
            row.push(hot.getDataAtCell(r, c));
          }
          gridData.push(row);
        }

        // Send to backend
        const response = await fetch('/api/calculate', {
          method: 'POST',
          headers: {'Content-Type': 'application/json'},
          body: JSON.stringify({
            calculation_type: calcType,
            data: gridData,
            columns: selectedColumns,
            headers: hot.getColHeader(),
            additional_data: additionalData
          })
        });

        const result = await response.json();
        
        if(result.success) {


          // function renderResult(calcType, htmlContent) {
          //   // You can add more universal box styling here if you want
          //   document.getElementById('result').innerHTML = `
          //     <div style="font-family:arial,sans-serif;width:99%;max-width:380px;">
          //       <span style='font-weight:bold;font-size:17px;padding-bottom:5px;display:block;'>
          //         ${calcType.toUpperCase()} Results:
          //       </span>
          //       ${htmlContent}
          //     </div>
          //   `;
          // }

          function renderResults(calcType, rawHtml) {
            // Build the header
            let html = `<h4> ${calcType.toUpperCase()} Results:</h4>`;

            // rawHtml already contains each column's <div>…</div>
            // Wrap each in your simple box styling:
            const temp = document.createElement('div');
            temp.innerHTML = rawHtml.trim();

            // For each child DIV, grab its innerText and wrap it
            Array.from(temp.children).forEach(child => {
              const text = child.innerText.trim().replace(/\n/g, '<br>');
              html += `<div class="result-block">${text}</div>`;
            });

            // Finally inject
            document.getElementById('result').innerHTML = html;
          }

          // In your runCalculation success block:
          if (result.success) {
            renderResults(calcType, result.result);
            resultsHistory.push({ type: calcType, output_html: result.result });
            closeModal();
          }


          // document.getElementById('result').innerHTML = `
          //   <h4>${calcType.toUpperCase()} Results:</h4>
          //   <div>${result.result}</div>`;
          //   resultsHistory.push({
          //   type: calcType,
          //   output_html: result.result
          // });
        }

        else {
          document.getElementById('result').innerHTML = `
            <div style="color: red;">Error: ${result.error}</div>
          `;
        }
        
        closeModal();
      } catch(error) {
        document.getElementById('result').innerHTML = `
          <div style="color: red;">Calculation failed: ${error.message}</div>
        `;
      }
    };

    // File upload
    document.getElementById('fileInput').onchange = (e) => {
      const file = e.target.files[0];
      if(!file) return;
      const reader = new FileReader();
      reader.onload = function(e) {
        const data = new Uint8Array(e.target.result);
        const workbook = XLSX.read(data, {type: "array"});
        const wsname = workbook.SheetNames;
        const ws = workbook.Sheets[wsname];
        const sheetData = XLSX.utils.sheet_to_json(ws, {header:1});
        hot.loadData(sheetData);
      };
      reader.readAsArrayBuffer(file);
    };

    // Utility functions
    function saveData() {
      const data = hot.getData();
      const ws = XLSX.utils.aoa_to_sheet(data);
      const wb = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(wb, ws, "Data");
      XLSX.writeFile(wb, "spss_data.xlsx");
    }

    function exportData() {
      alert("Export functionality coming soon!");
    }



    async function exportAllResults() {
      if (!resultsHistory.length) {
        alert("There is No results to export.");
        return;
      }
      try {
        const resp = await fetch('/api/export', {
          method: 'POST',
          headers: {'Content-Type':'application/json'},
          body: JSON.stringify({ history: resultsHistory })
        });
        if (!resp.ok) throw new Error("Export failed");
          const blob = await resp.blob();
          const url = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = 'analysis_results.xlsx';
          document.body.appendChild(a);
          a.click();
          a.remove();
          URL.revokeObjectURL(url);
      } catch (e) {
        alert("Export error: " + e.message);
      }
    }

  </script>

  <script>
  // Function to render correlation results as a matrix

  function renderCorrelationMatrix(rawText) {
    const container = document.getElementById("result");
    if (!rawText || !rawText.trim()) {
      container.innerHTML = "<p>No correlation results available.</p>";
      return;
    }

    // Regular expression to match each correlation entry
    const regex = /([A-Z])\s*vs\s*([A-Z])\(Pearson\):r\s*=\s*([\d\.\-]+),\s*p\s*=\s*([\d\.\-]+)Strength:\s*([\w]+)\s*\((\w+)\)/g;
    let match;
    const entries = [];
    const variablesSet = new Set();

    while ((match = regex.exec(rawText)) !== null) {
      const [full, var1, var2, r, p, strength, direction] = match;
      entries.push({ var1, var2, r: parseFloat(r) });
      variablesSet.add(var1);
      variablesSet.add(var2);
    }

    if (entries.length === 0) {
      container.innerHTML = "<p>Unable to parse correlation results.</p>";
      return;
    }

    // Sort variables alphabetically
    const variables = Array.from(variablesSet).sort();

    // Create lookup for correlation values including diagonal
    const lookup = {};
    variables.forEach(v => lookup[`${v}-${v}`] = "1.000");
    entries.forEach(({ var1, var2, r }) => {
      lookup[`${var1}-${var2}`] = r.toFixed(3);
      lookup[`${var2}-${var1}`] = r.toFixed(3);
    });

    // Build HTML table for correlation matrix
    let html = '<h4>📊 Correlation Matrix</h4>';
    html += '<table border="1" cellspacing="0" cellpadding="5" style="border-collapse: collapse; font-family: Arial, sans-serif;">';

    // Header row
    html += '<thead><tr><th></th>';
    variables.forEach(v => { html += `<th>${v}</th>`; });
    html += '</tr></thead><tbody>';

    // Rows
    variables.forEach(rowVar => {
      html += `<tr><th>${rowVar}</th>`;
      variables.forEach(colVar => {
        html += `<td style="text-align: center;">${lookup[`${rowVar}-${colVar}`] || "N/A"}</td>`;
      });
      html += '</tr>';
    });

    html += '</tbody></table>';

    container.innerHTML = html;
  }

  // Generic render function – calls correlation matrix renderer if type is correlation
  function renderResults(calcType, rawText) {
    if (calcType.toLowerCase() === 'correlation') {
      renderCorrelationMatrix(rawText);
    } else {
      const container = document.getElementById("result");
      if (!rawText || !rawText.trim()) {
        container.innerHTML = "<p>No results available.</p>";
        return;
      }
      const temp = document.createElement('div');
      temp.innerHTML = rawText.trim();
      let html = `<h4>📊 ${calcType.toUpperCase()} Results</h4>`;
      Array.from(temp.children).forEach(div => {
        const lines = div.innerText.trim().split('\n').filter(l => l);
        html += `<div style="margin-bottom:20px; padding-left:10px; border-left:4px solid #1976d; font-family: monospace; font-size:14px;">`;
        lines.forEach(line => {
          const parts = line.split(':');
          if(parts.length > 1){
            html += `<strong>${parts[0].trim()}:</strong> ${parts.slice(1).join(':').trim()}<br>`;
          } else {
            html += `${line}<br>`;
          }
        });
        html += "</div>";
      });
      container.innerHTML = html;
    }
  }




  </script>


</body>
</html>
